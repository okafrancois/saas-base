datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Énumérations

enum UserRole {
  USER
  RESPONSIBLE // Responsable (Sous-administrateur)
  ADMIN // Administratif Consulaire
  SUPER_ADMIN // Super administrateur
}

enum RequestType {
  FIRST_REQUEST
  RENEWAL
  MODIFICATION
  CONSULAR_REGISTRATION
  PASSPORT_REQUEST
  ID_CARD_REQUEST
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  COHABITING
}

enum WorkStatus {
  EMPLOYEE
  ENTREPRENEUR
  UNEMPLOYED
  RETIRED
  STUDENT
  OTHER
}

enum NationalityAcquisition {
  BIRTH
  NATURALIZATION
  MARRIAGE
  OTHER
}

enum DocumentStatus {
  PENDING
  VALIDATED
  REJECTED
  EXPIRED
  EXPIRING
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  INCOMPLETE
  IN_PROGRESS
  COMPLETED
  VALID
  DRAFT
  SUBMITTED
  IN_REVIEW
  ADDITIONAL_INFO_NEEDED
  VALIDATED
}

enum DocumentType {
  PASSPORT
  IDENTITY_CARD
  BIRTH_CERTIFICATE
  RESIDENCE_PERMIT
  PROOF_OF_ADDRESS
  MARRIAGE_CERTIFICATE
  DEATH_CERTIFICATE
  DIVORCE_DECREE
  NATIONALITY_CERTIFICATE
  OTHER
  VISA_PAGES
  EMPLOYMENT_PROOF
  NATURALIZATION_DECREE
  IDENTITY_PHOTO
}

// Modèles principaux
model User {
  id       String   @id @default(cuid())
  email    String?  @unique
  phone    String?  @unique
  password String? // Hashed password if needed
  name     String?
  role     UserRole @default(USER)

  // Relations
  profile     Profile?
  consulateId String?
  consulate   Consulate? @relation(fields: [consulateId], references: [id])

  // Auth related
  emailVerified DateTime?
  phoneVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  lastLogin     DateTime?
  messages      Message[]

  serviceRequests ServiceRequest[]

  documents UserDocument[] @relation("userDocuments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations personnelles
  firstName              String
  lastName               String
  gender                 Gender
  birthDate              String
  birthPlace             String
  birthCountry           String
  nationality            String
  maritalStatus          MaritalStatus?
  workStatus             WorkStatus?
  acquisitionMode        NationalityAcquisition? @default(BIRTH)
  passportNumber         String
  passportIssueDate      DateTime
  passportExpiryDate     DateTime
  passportIssueAuthority String
  identityPicture        String?

  // Documents
  passport           UserDocument? @relation("passport", fields: [passportId], references: [id])
  passportId         String?       @unique
  birthCertificate   UserDocument? @relation("birthCertificate", fields: [birthCertificateId], references: [id])
  birthCertificateId String?       @unique
  residencePermit    UserDocument? @relation("residencePermit", fields: [residencePermitId], references: [id])
  residencePermitId  String?       @unique
  addressProof       UserDocument? @relation("addressProof", fields: [addressProofId], references: [id])
  addressProofId     String?       @unique

  // Contact
  address          Address?          @relation(fields: [addressId], references: [id])
  phone            String?
  email            String?
  emergencyContact EmergencyContact?

  // Gabonese specific
  addressInGabon  AddressGabon?
  activityInGabon String?

  // Informations familiales
  fatherFullName String?
  motherFullName String?
  spouseFullName String?

  // Informations professionnelles
  profession      String?
  employer        String?
  employerAddress String?

  // Métadonnées
  status    RequestStatus @default(INCOMPLETE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  addressId String?
}

model EmergencyContact {
  id           String  @id @default(cuid())
  fullName     String
  relationship String
  phone        String
  profile      Profile @relation(fields: [profileId], references: [id])
  profileId    String  @unique
}

model AddressGabon {
  id        String  @id @default(cuid())
  address   String
  district  String
  city      String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Address {
  id         String  @id @default(cuid())
  firstLine  String
  secondLine String?
  city       String
  zipCode    String?
  country    String

  // Relations
  consulate Consulate?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Profile   Profile[]
}

model Consulate {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @unique
  website   String?
  isGeneral Boolean  @default(false)
  logo      String?

  serviceRequests ServiceRequest[]

  // Relations
  users     User[]
  countries Country[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Country {
  id          String    @id @default(cuid())
  name        String
  code        String
  consulateId String
  consulate   Consulate @relation(fields: [consulateId], references: [id])
}

// Auth related models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  type       String

  @@unique([identifier, token])
}

// Mettre à jour le modèle Document
model UserDocument {
  id        String         @id @default(cuid())
  type      DocumentType
  status    DocumentStatus @default(PENDING)
  fileUrl   String // URL du fichier stocké
  issuedAt  DateTime?
  expiresAt DateTime?
  metadata  Json? // Métadonnées additionnelles
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  userId String?
  user   User?   @relation("userDocuments", fields: [userId], references: [id])

  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?

  // Relations inverses spécifiques
  passportProfile         Profile? @relation("passport")
  birthCertificateProfile Profile? @relation("birthCertificate")
  residencePermitProfile  Profile? @relation("residencePermit")
  addressProofProfile     Profile? @relation("addressProof")
}

model Message {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?
  createdAt        DateTime        @default(now())
}

model Note {
  id      String @id @default(cuid())
  content String

  serviceRequest   ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?

  createdAt DateTime @default(now())
}

// Types de démarches disponibles
enum ConsularServiceType {
  // Documents d'identité
  PASSPORT_REQUEST
  CONSULAR_CARD

  // État civil
  BIRTH_REGISTRATION
  MARRIAGE_REGISTRATION
  DEATH_REGISTRATION
}

// Statut de la démarche
enum ServiceRequestStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  ADDITIONAL_INFO_NEEDED
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

// Priorité de la démarche
enum ServicePriority {
  STANDARD
  URGENT
}

// Modèle pour les types de démarches
model ConsularService {
  id                String              @id @default(cuid())
  type              ConsularServiceType
  title             String
  description       String?
  requiredDocuments DocumentType[] // Types de documents requis
  optionalDocuments DocumentType[] // Types de documents optionnels
  estimatedTime     String? // Temps estimé de traitement
  price             Float? // Coût de la démarche
  isActive          Boolean             @default(true)

  // Configuration du workflow
  steps        ServiceStep[]
  requirements Json? // Conditions d'éligibilité
  validations  Json? // Règles de validation

  // Relations
  requests ServiceRequest[]

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour les étapes d'une démarche
model ServiceStep {
  id          String  @id @default(cuid())
  order       Int // Ordre de l'étape
  title       String
  description String?
  isRequired  Boolean @default(true)

  // Configuration du formulaire
  fields Json? // Structure des champs à remplir

  // Relations
  serviceId String
  service   ConsularService @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle pour les demandes de démarches
model ServiceRequest {
  id       String               @id @default(cuid())
  status   ServiceRequestStatus @default(DRAFT)
  priority ServicePriority      @default(STANDARD)

  // Relations
  serviceId   String
  service     ConsularService @relation(fields: [serviceId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  consulateId String
  consulate   Consulate       @relation(fields: [consulateId], references: [id])

  // Données de la demande
  formData  Json? // Données du formulaire
  documents UserDocument[] // Documents fournis
  notes     Note[] // Notes administratives
  messages  Message[] // Communications

  // Suivi
  submittedAt DateTime?
  completedAt DateTime?

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serviceId])
  @@index([consulateId])
}
// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Énumérations
enum UserRole {
  USER // Utilisateur standard (Ressortissant)
  RESPONSIBLE // Responsable (Sous-administrateur)
  ADMIN // Administratif Consulaire
  SUPER_ADMIN // Super administrateur
}

enum RequestType {
  FIRST_REQUEST // Première demande
  RENEWAL // Renouvellement
  MODIFICATION // Modification
}

enum Gender {
  MALE
  FEMALE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  COHABITING
}

enum WorkStatus {
  EMPLOYEE
  ENTREPRENEUR
  UNEMPLOYED
  RETIRED
  STUDENT
  OTHER
}

enum NationalityAcquisition {
  BIRTH
  NATURALIZATION
  MARRIAGE
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  INCOMPLETE
  IN_PROGRESS
  COMPLETED
  VALID
}

// Modèles principaux
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  phone     String?  @unique
  password  String? // Hashed password if needed
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile       Profile?
  consulateId   String?
  consulate     Consulate?     @relation(fields: [consulateId], references: [id])
  requests      Request[]
  messages      Message[]
  notifications Notification[]

  // Auth related
  emailVerified DateTime?
  phoneVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  lastLogin     DateTime?
  documents     Document[]
  appointments  Appointment[]
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations personnelles
  firstName              String
  lastName               String
  gender                 Gender
  birthDate              String
  birthPlace             String
  birthCountry           String
  nationality            String
  maritalStatus          MaritalStatus?
  workStatus             WorkStatus?
  acquisitionMode        NationalityAcquisition? @default(BIRTH)
  passportNumber         String
  passportIssueDate      DateTime
  passportExpiryDate     DateTime
  passportIssueAuthority String

  // Documents
  identityPicture  String? // URL
  passport         String? // URL
  birthCertificate String? // URL
  residencePermit  String? // URL
  addressProof     String? // URL

  // Contact
  address          Address?          @relation(fields: [addressId], references: [id])
  addressId        String?           @unique
  phone            String?
  emergencyContact EmergencyContact?

  // Gabonese specific
  addressInGabon  AddressGabon?
  activityInGabon String?

  // Informations familiales
  fatherFullName String?
  motherFullName String?
  spouseFullName String?

  // Informations professionnelles
  profession      String?
  employer        String?
  employerAddress String?

  // Métadonnées
  status    RequestStatus @default(INCOMPLETE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model EmergencyContact {
  id           String  @id @default(cuid())
  fullName     String
  relationship String
  phone        String
  profile      Profile @relation(fields: [profileId], references: [id])
  profileId    String  @unique
}

model AddressGabon {
  id        String  @id @default(cuid())
  address   String
  district  String
  city      String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Address {
  id         String  @id @default(cuid())
  firstLine  String
  secondLine String?
  city       String
  zipCode    String?
  country    String

  // Relations
  profile   Profile?
  consulate Consulate?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Consulate {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @unique
  website   String?
  isGeneral Boolean  @default(false)

  // Relations
  users        User[]
  countries    Country[]
  requests     Request[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Country {
  id          String    @id @default(cuid())
  name        String
  code        String
  consulateId String
  consulate   Consulate @relation(fields: [consulateId], references: [id])
}

model Request {
  id          String        @id @default(cuid())
  type        RequestType
  status      RequestStatus @default(PENDING)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  consulateId String
  consulate   Consulate     @relation(fields: [consulateId], references: [id])

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages Message[]
  notes    Note[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  requestId String
  request   Request  @relation(fields: [requestId], references: [id])
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  content   String
  requestId String
  request   Request  @relation(fields: [requestId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Auth related models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  type       String

  @@unique([identifier, token])
}

enum DocumentType {
  PASSPORT
  IDENTITY_CARD
  BIRTH_CERTIFICATE
  RESIDENCE_PERMIT
  PROOF_OF_ADDRESS
  MARRIAGE_CERTIFICATE
  DEATH_CERTIFICATE
  DIVORCE_DECREE
  NATIONALITY_CERTIFICATE
  OTHER
}

enum AppointmentType {
  DOCUMENT_SUBMISSION
  DOCUMENT_COLLECTION
  CONSULTATION
  OTHER
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  MISSED
}

// Mettre à jour le modèle Document
model Document {
  id        String       @id @default(cuid())
  type      DocumentType
  status    String // "PENDING", "VALIDATED", "REJECTED", "EXPIRED"
  fileUrl   String // URL du fichier stocké
  issuedAt  DateTime // Date d'émission
  expiresAt DateTime? // Date d'expiration si applicable
  metadata  Json? // Métadonnées additionnelles
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Ajouter le modèle Appointment
model Appointment {
  id          String            @id @default(cuid())
  type        AppointmentType
  status      AppointmentStatus @default(SCHEDULED)
  date        DateTime
  description String? // Au lieu de 'reason', utilisons 'description'
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  consulateId String
  consulate   Consulate @relation(fields: [consulateId], references: [id])
}